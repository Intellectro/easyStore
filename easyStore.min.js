!function(e){const t={localstorage:"localStorage",sessionstorage:"sessionStorage"},r=["localstorage","sessionstorage"],n=e=>{if(!Object.is(typeof e,"string"))throw new TypeError("Invalid data type. Method must be a string.");const t=e.toLowerCase();if(!r.includes(t))throw new Error("Invalid Method Type",{cause:'Method only accepts "localStorage" or "sessionStorage"'});return t};Object.assign(e.easyStore,{set:(r,o,s,a=0)=>{if("number"!=typeof a)throw new TypeError("Invalid data type. ttl must be a number");const i=n(s),c=t[`${i}`],l={value:o,expires:a>0?Date.now()+a:null};if("string"!=typeof r)throw new TypeError("Invalid data type. Key must be a string.");e[c].setItem(r,JSON.stringify(l))},get:(r,o)=>{const s=n(o),a=t[`${s}`];if("string"!=typeof r)throw new TypeError("Invalid data type. Key must be a string.");const i=e[a].getItem(r);if(!i)return null;try{const{value:t,expires:n}=JSON.parse(i);return n&&Date.now()>n?(e[a].removeItem(r),null):t}catch(e){return console.warn(`[easyStore] Failed to parse value for key "${r}". Returning raw value.`),i}},clear:r=>{const o=n(r);e[t[`${o}`]].clear()},remove:(r,o)=>{const s=n(o),a=t[`${s}`];if("string"!=typeof r)throw new TypeError("Invalid data type. Key must be a string.");e[a].removeItem(r)},has:(r,o)=>{const s=n(o),a=e[t[s]].getItem(r);if(!a)return!1;try{const{expires:e}=JSON.parse(a);return!(e&&Date.now()>e)}catch{return!0}},ttlLeft:(r,o)=>{const s=n(o),a=e[t[s]].getItem(r);if(!a)return 0;try{const{expires:e}=JSON.parse(a);return e?Math.max(0,e-Date.now()):0}catch{return 0}},keys:r=>{const o=n(r),s=t[o];return Object.keys(e[s])}})}("undefined"!=typeof window?window:this);